//-----------------------------------------------------------------------------
// Main
//-----------------------------------------------------------------------------

/*
 * main.c
 */
// Project Fall 2015 C/ASM Mix
// Diptiman Hazra

//-----------------------------------------------------------------------------
// Hardware Target
//-----------------------------------------------------------------------------

// Target Platform: EK-TM4C123GXL Evaluation Board
// Target uC:       TM4C123GH6PM
// System Clock:    40 MHz

// Hardware configuration:
// Green LED:
//   PF3 drives an NPN transistor that powers the green LED

//-----------------------------------------------------------------------------
// Device includes, defines, and assembler directives
//-----------------------------------------------------------------------------

#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "tm4c123gh6pm.h"

#define GREEN_LED (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 3*4)))
#define LED (*((volatile uint32_t *)(0x42000000 + (0x400053FC-0x40000000)*32 + 5*4))) 	//PB5
#define PUSH_BUTTON  (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 4*4)))

int DMX_512[512] = {0};
int Max_Value=512;
int Master_value=0;
int User_flag;
int PACKET_INDEX;
int TRASNMIT_PHASE=0;

#define BREAK_MAB 0
#define START_CODE 1
#define PACKETS 2

int TEMP_DATA=0;
int RECEIVE_INDEX=0;
int RX_ADDRESS;
int value;
int RECEIVE_DATA_512[513]={0};

#define P1  (*((volatile uint32_t *)(0x42000000 + (0x400053FC-0x40000000)*32 + 4*4)))   //PB4
#define P2  (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 6*4)))	//PA6
#define P3  (*((volatile uint32_t *)(0x42000000 + (0x400043FC-0x40000000)*32 + 7*4)))	//PA7
#define P4  (*((volatile uint32_t *)(0x42000000 + (0x400243FC-0x40000000)*32 + 3*4)))	//PE3
#define P5  (*((volatile uint32_t *)(0x42000000 + (0x400243FC-0x40000000)*32 + 2*4)))	//PE2
#define P6  (*((volatile uint32_t *)(0x42000000 + (0x400243FC-0x40000000)*32 + 1*4)))	//PE1
#define P7  (*((volatile uint32_t *)(0x42000000 + (0x400073FC-0x40000000)*32 + 3*4)))	//PD3
#define P8  (*((volatile uint32_t *)(0x42000000 + (0x400073FC-0x40000000)*32 + 2*4)))	//PD2
#define P9  (*((volatile uint32_t *)(0x42000000 + (0x400073FC-0x40000000)*32 + 1*4)))	//PD1
#define P10  (*((volatile uint32_t *)(0x42000000 + (0x400073FC-0x40000000)*32 + 0*4)))	//PD0

#define DE (*((volatile uint32_t *)(0x42000000 + (0x400063FC-0x40000000)*32 + 6*4)))	//Data Enable

//-----------------------------------------------------------------------------
// Subroutines
//-----------------------------------------------------------------------------

void waitPbPress()
{
	while(PUSH_BUTTON);
}

waitPbPress1()
{
	while(PUSH_BUTTON);
}


// Initialize Hardware
void initHw()
{
	// Configure HW to work with 16 MHz XTAL, PLL enabled, system clock of 40 MHz
    SYSCTL_RCC_R = SYSCTL_RCC_XTAL_16MHZ | SYSCTL_RCC_OSCSRC_MAIN | SYSCTL_RCC_USESYSDIV | (4 << SYSCTL_RCC_SYSDIV_S);

    // Set GPIO ports to use APB (not needed since default configuration -- for clarity)
    SYSCTL_GPIOHBCTL_R = 0;

    // Enable GPIO port F peripherals
    SYSCTL_RCGC2_R = SYSCTL_RCGC2_GPIOF|SYSCTL_RCGC2_GPIOA|SYSCTL_RCGC2_GPIOB|SYSCTL_RCGC2_GPIOD|SYSCTL_RCGC2_GPIOE|SYSCTL_RCGC2_GPIOC;

    // Configure LED and pushbutton pins
    GPIO_PORTF_DIR_R |= 0x08;  // make bit 1 an outputs
    GPIO_PORTF_DR2R_R |= 0x08; // set drive strength to 2mA (not needed since default configuration -- for clarity)
    GPIO_PORTF_DEN_R |= 0x18;  // enable LED and pushbuttons
    GPIO_PORTF_PUR_R = 0x10; // // enable internal pull-up for push button

    //Configure port A
    SYSCTL_RCGCUART_R |= SYSCTL_RCGCUART_R0;
    GPIO_PORTA_DR2R_R |= 0x03; // set drive strength to 2mA (not needed since default configuration -- for clarity)
    GPIO_PORTA_DEN_R |= 0xC3;
           GPIO_PORTA_PUR_R = 0xC0;
           GPIO_PORTA_AFSEL_R |= 3;

           // Configure UART0 to 115200 baud, 8N1 format
           GPIO_PORTA_PCTL_R = GPIO_PCTL_PA1_U0TX | GPIO_PCTL_PA0_U0RX;
           UART0_CTL_R = 0;                                 // turn-off UART0 to allow safe programming
           UART0_CC_R = UART_CC_CS_SYSCLK;                  // use system clock (40 MHz)
           UART0_IBRD_R = 21;                               // r = 40 MHz / (Nx115.2kHz), set floor(r)=21, where N=16
           UART0_FBRD_R = 45;								
           UART0_LCRH_R = UART_LCRH_WLEN_8 | UART_LCRH_FEN; // configure for 8N1 w/ 16-level FIFO
           UART0_CTL_R = UART_CTL_TXE | UART_CTL_RXE | UART_CTL_UARTEN; // enable TX, RX, and module

    //Configure port B

       GPIO_PORTB_DIR_R |= 0x20;  // make bit 5 an outputs and configure UART
       GPIO_PORTB_DR2R_R |= 0x20; // set drive strength to 2mA (not needed since default configuration -- for clarity)
       GPIO_PORTB_DEN_R |= 0x30;
       GPIO_PORTB_PUR_R = 0x10;
       //GPIO_PORTB_AFSEL_R |= 3;
      // GPIO_PORTB_PCTL_R = GPIO_PCTL_PB1_U1TX | GPIO_PCTL_PB0_U1RX;

       //Configure port C for UART1 8N2 format
          SYSCTL_RCGCUART_R |= SYSCTL_RCGCUART_R1;
          GPIO_PORTC_DIR_R |= 0x40;
          GPIO_PORTC_DR2R_R |= 0x40; // set drive strength to 2mA (not needed since default configuration -- for clarity)
          GPIO_PORTC_DEN_R |= 0x70;
          //GPIO_PORTC_PUR_R = 0xC0;
          GPIO_PORTC_AFSEL_R |= 0x30;
          GPIO_PORTC_PCTL_R |= GPIO_PCTL_PC5_U1TX | GPIO_PCTL_PC4_U1RX;

       //Configure port D
          GPIO_PORTD_DIR_R |= 0x00;  // make bit 1 an outputs
          GPIO_PORTD_DR2R_R |= 0x0F; // set drive strength to 2mA (not needed since default configuration -- for clarity)
          GPIO_PORTD_DEN_R |= 0x0F;
          GPIO_PORTD_PUR_R = 0x0F;

     //Configure port E
          GPIO_PORTE_DIR_R |= 0x00;  // make bit 1 an outputs
          GPIO_PORTE_DR2R_R |= 0x0E; // set drive strength to 2mA (not needed since default configuration -- for clarity)
          GPIO_PORTE_DEN_R |= 0x0E;
          GPIO_PORTE_PUR_R |= 0x0E;

          //DE = 1;
}



void configureUart1BaudRate_250k()
{
	UART1_CTL_R = 0;
	UART1_CC_R = UART_CC_CS_SYSCLK; //40 MHz
	UART1_IBRD_R = 10; // 10 for 250000bits per seconds ,
	UART1_FBRD_R = 0;
	UART1_LCRH_R = UART_LCRH_WLEN_8 | UART_LCRH_STP2;
	UART1_CTL_R = UART_CTL_TXE | UART_CTL_RXE | UART_CTL_UARTEN | UART_CTL_EOT;
	UART1_IM_R = UART_IM_TXIM | UART_IM_RXIM ;            // turn-on RX interrupt
	NVIC_EN0_R |= 1 << (INT_UART1 - 16);  // turn-on interrupt 21 (UART1)
}

void configureUart1BaudRate_100k()
{
	UART1_CTL_R = 0;
	UART1_CC_R = UART_CC_CS_SYSCLK; //40 MHz
	UART1_IBRD_R = 25; // 25 for 100000bits per seconds , to generate a period of 10usec to trasfer 1 bit
	UART1_FBRD_R = 0;
	UART1_LCRH_R = UART_LCRH_WLEN_8 | UART_LCRH_STP2;
	UART1_CTL_R = UART_CTL_TXE | UART_CTL_RXE | UART_CTL_UARTEN | UART_CTL_EOT;
	UART1_IM_R = UART_IM_TXIM | UART_IM_RXIM;            // turn-on RX interrupt
	NVIC_EN0_R |= 1 << (INT_UART1 - 16);  // turn-on interrupt 21 (UART1)
}
// Approximate busy waiting (in units of microseconds), given a 40 MHz system clock
void waitMicrosecond(uint32_t us)
{
	                                            // Approx clocks per us
	__asm("WMS_LOOP0:   MOV  R1, #6");          // 1
    __asm("WMS_LOOP1:   SUB  R1, #1");          // 6
    __asm("             CBZ  R1, WMS_DONE1");   // 5+1*3
    __asm("             NOP");                  // 5
    __asm("             B    WMS_LOOP1");       // 5*3
    __asm("WMS_DONE1:   SUB  R0, #1");          // 1
    __asm("             CBZ  R0, WMS_DONE0");   // 1
    __asm("             B    WMS_LOOP0");       // 1*3
    __asm("WMS_DONE0:");                        // ---
                                                // 40 clocks/us + error
}
void putcUart0(char c)
{
	while (UART0_FR_R & UART_FR_TXFF);
	UART0_DR_R = c;
}

// Blocking function that writes a string when the UART buffer is not full
void putsUart0(char* str)
{
	int i;
    for (i = 0; i < strlen(str); i++)
	  putcUart0(str[i]);
}

// Blocking function that returns with serial data once the buffer is not empty
char getcUart0()
{
	while (UART0_FR_R & UART_FR_RXFE);
	return UART0_DR_R & 0xFF;
}

char* DIPInput()
{


	return (0);
}

void Device_update()
{
	//RX_ADDRESS=value;

	//set RECEIVE_DATA_512[RX_ADDRESS];

	if((RECEIVE_DATA_512[value])==0)
	{
		LED = 0;
	}
	else
	{
		LED = 1;
	}
}


void UART1ISR()

{
	if (Master_value == 1 && User_flag == 1){

		    						    						//return; // Since we are not in master mode , but in future we may have to change this for receiving data .


		    			   if (PACKET_INDEX > Max_Value)
		    				{
		    						TRASNMIT_PHASE = BREAK_MAB; // We have send all the data and its time to start of sending break and MAB again .
		    						PACKET_INDEX = 0; // Index is 0x00
		    						//putsUart0("\r\nThe bit has been sent");

		    				}

		    				switch (TRASNMIT_PHASE)
		    						{

		    						case BREAK_MAB:
		    						TRASNMIT_PHASE = START_CODE;
		    					   	configureUart1BaudRate_100k(); // So that we transfer the data at lower rate
		    						UART1_DR_R = 0x00;				// Send the break code 1 start code,8 bit , 2 stop code == 90usec,20usec
		    						// So that next we trasfer the start code
		    						break;

		    						 case START_CODE:
		    						 configureUart1BaudRate_250k(); // So that we trasfer the data at higher rate
		    						 UART1_DR_R = START_CODE;	    // Send the start code at higher rate
		    						 TRASNMIT_PHASE = PACKETS;	// Send packets after sending the START code which may be 0x00,0x0c
		    						// putsUart0("\r\nThe start code has been sent");
		    						 break;

		    						 case PACKETS:
		    				   		UART1_DR_R = DMX_512[PACKET_INDEX++]; // Transfer and increment the to send data byte to trasnfer .
		    						 //putsUart0("\r\nThe packet has been sent");

		    				   		break;								  // When we reach max value the first if statemet should handle it

		    						 default:
		    						 break;
		    						  }
		    			//	UART1_ICR_R|=UART_ICR_TXIC;
					}
		else if (Master_value == 0 /*&& User_flag == 1*/)
				{
				TEMP_DATA=UART1_DR_R;
				//DE=0;
				GREEN_LED = 1;

				if(TEMP_DATA & (1<<8))
					{
					RECEIVE_INDEX=0;
					//putcUart0('b');
					Device_update();
					}
				else
					{

					RECEIVE_DATA_512[RECEIVE_INDEX++]=((0xFF) & TEMP_DATA);
					//putcUart0('d');
					}

				}

			UART1_ICR_R |= UART_ICR_TXIC;
			UART1_ICR_R |= UART_ICR_RXIC;

}

void Start_transmission()
{
	if (Master_value == 1 && User_flag == 1)

	{
		TRASNMIT_PHASE = START_CODE;
		configureUart1BaudRate_100k();
		UART1_DR_R = 0x00;

	}
}
//-----------------------------------------------------------------------------------------------------------------------------------------
// step 4
//-----------------------------------------------------------------------------------------------------------------------------------------

void getString(char* str, int size)
{
char str_1[30];
char position[30];
char prev;
char p[50];
char current;
char type[20]={'\0'};
char error[40];
char error1[40];
int pos[30];
int k,n;
int count=0;

char buf[30];
char* Val_CMD;
char* val_ADD;
char* Value;
int i;
int address=0;
char a[10];
int Get_value;
int on;
char demo[40];

		    GREEN_LED = 1;
		    waitMicrosecond(250000);
		    GREEN_LED = 0;
		    putsUart0("\r\nThe entered code is: ");
		    putsUart0(str);
		    putsUart0("\r\n");
		     putsUart0("\r\n");

		    for(k=0;k<=size;k++)
		    {
		    	prev=str[k-1];
		    	current=str[k];

		    	if((prev>=0&&prev<=47)||(prev>=58&&prev<=64)||(prev>=91&&prev<=96)||(prev>=123&&prev<=127))
		    	{
		    		if((current>=65&&current<=90)||(current>=97&&current<=122))

		    					    {
		    						pos[count]=k;
		    					    type[count]='a';
		    					    count++;
		    					    }
		    		else if(current>=48&&current<=57)
		    				    		{
		    								pos[count]=k;
		    				    			type[count]='n';
		    				    			count++;
		    				    		}

		    	}
		    	else if((prev>=65&&prev<=90)|(prev>=97&&prev<=122))
		    					{
		    					if(current>=48&&current<=57)
		    			    		{

		    			    			sprintf(error,"\r\nError: number not allowed after alphabet at %d",k);
		    			    			putsUart0(error);
		    			    			continue;

		    			    		}

		    					}
		    	else if(prev>=48&&prev<=57)
		    			    	{
		    			    		if((current>=65&&current<=90)|(current>=97&&current<=122))
		    			    		{
		    			    		sprintf(error1,"\r\nError: alphabet not allowed after number at %d",k);
		    			    		putsUart0(error1);
		    			    		continue;
		    			    		}
		    			    	}


		    }
		    for(k=0;k<=size;k++)
		    		    {

		    		    	if(!((str[k]>=48&&str[k]<=57)||(str[k]>=65&&str[k]<=90)||(str[k]>=97&&str[k]<=122)))

		    		    	{
		    		    			    		str[k]=' ';
		    		    	}

		    		    }

//-----------------------------------------------------------------------------------------------------------------------------------------
// step 5
//-----------------------------------------------------------------------------------------------------------------------------------------

		    			Val_CMD=strtok(str," ");
		    			val_ADD=strtok(NULL," ");
		    			Value=strtok(NULL," ");
		    			for(i=0;i<strlen(Val_CMD);i++)
		    				{
		    					if(islower(Val_CMD[i]))
		    					{
		    				    Val_CMD[i]=toupper(Val_CMD[i]);
		    					}
		    				}

		    				address=atoi(val_ADD);

		    				if((strcmp(Val_CMD,"SET"))==0){
		    					if(count!=3)
		    					{
		    						putsUart0("\r\nError: Need two arguments");


		    					}
		    					else if(address>=0 && address<=Max_Value) {

		    					DMX_512[address]=atoi(Value);
		    					putsUart0("\r\nThe given value of DMX_512 is set");
		    					}
		    					else{putsUart0("\r\nError: Address more than max address is not allowed");}
		    					}



		    				else if((strcmp(Val_CMD,"GET"))==0){
		    					if(count!=2)
		    							    {
				    						putsUart0("\r\nError: Need only one arguments");
		    							    }
		    					else if(address>=0 && address<=Max_Value){

		    					Get_value=DMX_512[address];

		    					sprintf(p,"\r\nThe value at this address is: %d",Get_value);
		    					putsUart0(p);
		    					}
		    					else{putsUart0("\r\nError: Address more than max address is not allowed");}
		    				}
		    				else if((strcmp(Val_CMD,"ON"))==0){
		    					if(count!=1)
		    							    {
		    							    putsUart0("\r\nError: Need no arguments");
					    					}
		    					else if(User_flag==0) {
					    						User_flag=1;
		    					putsUart0("\r\nController is on");
		    					 Start_transmission();

		    					}
		    					else {putsUart0("\r\nTransmission is already going on");}

		    				}
		    				else if((strcmp(Val_CMD,"OFF"))==0){
		    					if(count!=1)
		    					 {
		    					   putsUart0("\r\nError: Need no arguments");
		    					 }
		    						else{
		    							User_flag=0;
		    						    putsUart0("\r\nController is off");
		    						}



		    				}
		    				else if((strcmp(Val_CMD,"MAX"))==0){
		    					if(count!=2)
		    							    					 {
		    							    					   putsUart0("\r\nError: Need only one arguments");
		    							    					 }
		    					else if(address>512){

		    						putsUart0("\r\nError: Max address allowed is 512");
		    					}
		    							    						else{
		    					Max_Value=atoi(val_ADD);
		    					 putsUart0("\r\nThe Max value is set");}

		    				}
		    				else if((strcmp(Val_CMD,"CLEAR"))==0){
		    					if(count!=1)
		    							     {
		    							      putsUart0("\r\nError: Need no arguments");
		    							    	}
		    					else{

		    					for(i=0;i<=Max_Value;i++){
		    					DMX_512[i]=0;
		    					}
		    					 putsUart0("\r\nThe DMX_512 has been cleared");

		    					}

		    				}
		    				else{
		    				putsUart0("\r\nError: Invalid Entry\r\n");
		    				}

//-----------------------------------------------------------------------------------------------------------------------------------------
// step 6
//-----------------------------------------------------------------------------------------------------------------------------------------
}

//-----------------------------------------------------------------------------
// Main
//-----------------------------------------------------------------------------

int main(void)
{
	initHw();

		//int value;

	     GREEN_LED = 1;
	     waitMicrosecond(250000);
	     GREEN_LED = 0;

	     char str[20];
	     	Master_value=!P1;
	     	//Master_value=0;
	    	 value=(!P10*256)+(!P9*128)+(!P8*64)+(!P7*32)+(!P6*16)+(!P5*8)+(!P4*4)+(!P3*2)+(!P2*1);
	    	 sprintf(str,"\n\rYour input address is: %d",value);

	    	 putsUart0(str);

	    	 if(Master_value == 0)
	    	 {
	    	 DE=0;
	    	 configureUart1BaudRate_250k();
	    	 }

	    	 else if(Master_value == 1)
	    	 {DE=1;}

//-----------------------------------------------------------------------------------------------------------------------------------------
// step 3
//-----------------------------------------------------------------------------------------------------------------------------------------

while(1)
{

	int i;

			char c;
			int size=0;
			 char buffer[80];
			int Max_length=80;
	    	 putsUart0("\r\nWelcome\r\n");
	    	 putsUart0("Please enter some alpha numeric text\r\n");
	     for(i=0;i<=Max_length;i++)
	     {
	    	char c=getcUart0();

	    	if(c==8)
	    	{

	    		if(size>=0){size--;

	    		}
	    		else{
	    			putsUart0("Error due to backspace\r\n");
	    		continue;

	    		}
	    	}

	    	else if(c=='\r')
	    	{
	    		buffer[size]='\0';
	    		putsUart0("\n\r");
	    		break;
	    	}
	    	else{

	    		buffer[size]=c;
	    		size++;
	    		if(size==Max_length)
	    		{
	    			buffer[size]='\0';

	    		}
	    		else{continue;}
	    	}

	     }

	     getString(&buffer,size);

}
}





