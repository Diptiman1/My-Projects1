#include <iostream>
#include <exception>
#include <string>
#include <stdexcept>
#include <vector>
#include <cmath>
using namespace std;

class Server {
private:
	static int load;
public:
	static int compute(long long A, long long B) {
		load += 1;
		if (A < 0) {
			throw std::invalid_argument("A is negative");
		}

		vector<int> v(A, 0);
		int real = -1, cmplx = sqrt(-1);
		if (B == 0) throw 0;
		real = (A / B)*real;
		int ans = v.at(B);
		return real + A - B*ans;
	}
	static int getLoad() {
		return load;
	}
};
int Server::load = 0;

int main() {
	int T; cin >> T;
	while (T--) {
		long long A, B;
		cin >> A >> B;
	
		/* Enter your code here. */
		string line;
		try {
			Server s;
			s.compute(A, B);
		}

		/*	catch (std::exception& e)
		{
		if(e.what() == "bad allocation")
		std::cerr << "Not enough memory"<< " " << e.what() << '\n';

		else
		std::cerr << "Exception: " << e.what() << '\n';
		}*/

		catch (const std::invalid_argument &msg) {
			cerr << "Exception: " << msg.what() << endl;
		}

		catch (std::exception& e)
		{
			//cout << e.what() << endl;
			line = e.what();
			if (line == "bad allocation" || line == "vector<T> too long") {
				std::cout << "Not enough memory" << '\n';
			}
			else
			{
				std::cout << "Other Exception" << endl;
			}
		}
	}
	cout << Server::getLoad() << endl;
	return 0;
}