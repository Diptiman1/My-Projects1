// RTOS Framework - Spring 2017
// J Losh

// Student Name:DIPTIMAN HAZRA
// TO DO: Add your name on this line.  Do not include your ID number.

// Submit only two .c files in an e-mail to me (not in a compressed file):
// xx_rtos_coop.c   Cooperative version of your project
// xx_rtos_prempt.c Premptive version of your project
// (xx is a unique number that will be issued in class)

//-----------------------------------------------------------------------------
// Hardware Target
//-----------------------------------------------------------------------------

// Target Platform: EK-TM4C123GXL Evaluation Board
// Target uC:       TM4C123GH6PM
// System Clock:    40 MHz

// Hardware configuration:
// 4 Pushbuttons and 5 LEDs, UART

//-----------------------------------------------------------------------------
// Device includes, defines, and assembler directives
//-----------------------------------------------------------------------------

#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include "tm4c123gh6pm.h"

// REQUIRED: correct these bit banding references for green and yellow LEDs (temporary to guarantee compilation)

#define GREEN_LED (*((volatile uint32_t *)(0x42000000 + (0x400053FC-0x40000000)*32 + 6*4))) 	//PB6
#define YELLOW_LED (*((volatile uint32_t *)(0x42000000 + (0x400053FC-0x40000000)*32 + 7*4)))	//PB7
#define ORANGE_LED (*((volatile uint32_t *)(0x42000000 + (0x400073FC-0x40000000)*32 + 2*4)))	//PD2
#define RED_LED (*((volatile uint32_t *)(0x42000000 + (0x400073FC-0x40000000)*32 + 3*4)))		//PD3
#define BLUE_LED     (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 2*4)))  // on-board blue LED

#define SWT1 (*((volatile uint32_t *)(0x42000000 + (0x400063FC-0x40000000)*32 + 4*4)))	//PC4
#define SWT2 (*((volatile uint32_t *)(0x42000000 + (0x400063FC-0x40000000)*32 + 5*4)))	//PC5
#define SWT3 (*((volatile uint32_t *)(0x42000000 + (0x400063FC-0x40000000)*32 + 6*4)))	//PC6
#define SWT4 (*((volatile uint32_t *)(0x42000000 + (0x400063FC-0x40000000)*32 + 7*4)))	//PC7

#define RED    (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 1*4)))  // PF1== RED_HW
#define BUTT    (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 4*4)))  // PF4== PUSH1
#define BLUE    (*((volatile uint32_t *)(0x42000000 + (0x400253FC-0x40000000)*32 + 2*4)))  // PF2== BLUE_HW

//-----------------------------------------------------------------------------
// RTOS Defines and Kernel Variables
//-----------------------------------------------------------------------------

// function pointer
typedef void (*_fn)();

// semaphore
#define MAX_SEMAPHORES 5
#define MAX_QUEUE_SIZE 10
struct semaphore
{
  uint16_t count;
  uint16_t queueSize;
  uint32_t processQueue[MAX_QUEUE_SIZE]; // store task index here
} semaphores[MAX_SEMAPHORES];
uint8_t semaphoreCount = 0;

struct semaphore *keyPressed, *keyReleased, *flashReq, *resource;


//typedef struct semaphore *resource;
// task
#define STATE_INVALID    0 // no task
#define STATE_READY      1 // ready to run
#define STATE_BLOCKED    2 // has run, but now blocked by semaphore
#define STATE_DELAYED    3 // has run, but now awaiting timer

#define MAX_TASKS 10       // maximum number of valid tasks
uint8_t taskCurrent = 0;   // index of last dispatched task
uint8_t taskCount = 0;     // total number of valid tasks

struct _tcb {
	uint8_t state;                 // see STATE_ values above
	void *pid;                     // used to uniquely identify thread
	void *sp;                      // location of stack pointer for thread
	uint8_t priority;              // 0=highest, 15=lowest
	uint8_t currentPriority;       // used for priority inheritance
	uint8_t skipcount;             // used for rtos Scheduler
	uint32_t ticks;                // ticks until sleep complete
	char name[16];                 // name of task used in ps command
	void *semaphore;     // pointer to the semaphore that is blocking the thread
	uint32_t process_time;
} tcb[MAX_TASKS];

uint32_t stack[MAX_TASKS][256];

// function prototype
void flash4Hz();
void idle();
void save_tcbsp_coresp(uint8_t*);
void SysTick_setup();
void stack_init(int i, _fn fn);
void directChange(uint32_t pc);
void start_timer();
void stop_timer();
void ResetISR();
int atoi();
uint32_t get_sp_value_from_ro();
int isalpha();
int isdigit();
uint8_t idle_cnt = 0;
uint8_t flash_cnt = 0;
uint32_t ticks_cnt = 0;
uint32_t read_buttons = 0;
uint32_t timer_value;
char s2[10], s3[10];
char str_g[81];
char field_type[5];
int field_position[5];
int number_field, i, c2, c3;
int tmer_1 = 0, j, tmer;
char fn_name[16];
uint16_t raw[4], k;
char temp_buffer[100];

//functions
void save_tcbsp_coresp(uint8_t *c) { // passing tcb sp to core SP inorder to pass starting address for next thread
	__asm("    mov sp,r0");
	__asm("    sub sp, sp, #8");

}

void directChange(uint32_t pc) {
	__asm( " mov pc,r0");
}

uint32_t get_sp_value_from_ro() {
	__asm("   mov r0,sp");
}
//-----------------------------------------------------------------------------
// RTOS Kernel
//-----------------------------------------------------------------------------

void rtosInit() {
	uint8_t i;
	// no tasks running
	taskCount = 0;
	// clear out tcb records
	for (i = 0; i < MAX_TASKS; i++) {
		tcb[i].state = STATE_INVALID;
		tcb[i].pid = 0;
	}
	SysTick_setup(); // REQUIRED: systick for 1ms system timer    //DONE
}

int rtosScheduler() {
//	// REQUIRED: Implement prioritization to 16 levels
	bool ok;
	static uint8_t task = 0xFF;
	ok = false;
	while (!ok) {
		task++;
		if (task >= MAX_TASKS)
			task = 0;

		if (tcb[task].state == STATE_READY) {

			if (tcb[task].skipcount == tcb[task].priority) {
				tcb[task].skipcount = 0;  // reset the priority
				ok = true;
			} else {
				//			tcb[task].state == STATE_INVALID;
				tcb[task].skipcount++;
			}

		}

	}
	start_timer();
	return task;
}

bool createThread(_fn fn, char name[], int priority) {
	bool ok = false;
	uint8_t i = 0;
	bool found = false;
	// REQUIRED: take steps to ensure a task switch cannot occur
	// save starting address if room in task list
	if (taskCount < MAX_TASKS) {
		// make sure fn not already in list (prevent re entrancy)
		while (!found && (i < MAX_TASKS)) {
			found = (tcb[i++].pid == fn);
		}
		if (!found) {
			// find first available tcb record
			i = 0;
			while (tcb[i].state != STATE_INVALID) {
				i++;
			}

			// save the thread name
			strcpy(tcb[i].name, name);

			// REQUIRED: preload stack to look like the task had run before
			stack_init(i, fn);

			tcb[i].priority = priority;
			tcb[i].currentPriority = priority;

			//Make sure we make it ready, only after we done with all the initialization
			tcb[i].state = STATE_READY;
			tcb[i].pid = fn;
			// increment task count
			taskCount++;
			ok = true;
		}
	}
	// REQUIRED: allow tasks switches again
	return ok;
}

void stack_init(int i, _fn fn) {

	stack[i][256 - 1] = 0x01000000; // Thumb bit stack
	stack[i][256 - 2] = (uint32_t) fn; // R15 (PC)
	stack[i][256 - 3] = (uint32_t) fn;   // R14(LR)

	stack[i][256 - 4] = 0x0000000C; // R12

	stack[i][256 - 5] = 0x00000003; // R3
	stack[i][256 - 6] = 0x00000002; // R2
	stack[i][256 - 7] = 0x00000001; // R1
	stack[i][256 - 8] = 0x00000000; // R0

	stack[i][256 - 9] = 0x0000000B; // R11
	stack[i][256 - 10] = 0x0000000A; // R10
	stack[i][256 - 11] = 0x00000009; // R9
	stack[i][256 - 12] = 0x00000008; // R8
	stack[i][256 - 13] = 0x00000007; // R7
	stack[i][256 - 14] = 0x00000006; // R6
	stack[i][256 - 15] = 0x00000005; // R5
	stack[i][256 - 16] = 0x00000004; // R4

	// stack should point to the last location as we would start poping from here
	// in schedular.
	tcb[i].sp = &stack[i][256 - 16]; // Passing address of stacpointer thread stack pointer
}

// REQUIRED: modify this function to destroy a process
void destroyProcess(_fn fn) {

	int dsrty;
//	__asm("CPSID I");
	for (dsrty = 0; dsrty < MAX_TASKS; dsrty++) {
		int g;
		if (tcb[dsrty].pid == fn) {
			tcb[dsrty].state = STATE_INVALID;
			tcb[dsrty].pid = 0x00000000;
			tcb[dsrty].sp = 0x0000000;
			tcb[dsrty].priority = 0;
			tcb[dsrty].currentPriority = 0;
			tcb[dsrty].ticks = 0;
			tcb[dsrty].process_time = 0;
			tcb[dsrty].skipcount = 0;
			for (g = 0; g < 16; g++) {
				tcb[dsrty].name[g] = 0;
				if ((tcb[dsrty].name[g] == 0) && (tcb[dsrty].name[g + 1] == 0)
						&& (tcb[dsrty].name[g + 2] == 0)) {
					break;
				}
			}
			tcb[dsrty].semaphore = 0x00000000;
			taskCount--;
		}
	}
}

struct semaphore* createSemaphore(int count)
{
  struct semaphore *pSemaphore = 0;
  if (semaphoreCount < MAX_SEMAPHORES)
  {
    pSemaphore = &semaphores[semaphoreCount++];
    pSemaphore->count = count;
  }
  return pSemaphore;
}

void rtosStart() {

	NVIC_ST_CTRL_R = 0x00000007; //  Enabling Systick using System Clock, Interrupt called when it count downs to zero and enable Systick.
	//taskCurrent=task.;
	// REQUIRED: add code to call the first task to be run, restoring the preloaded context
//	_fn fn;
	taskCurrent = rtosScheduler();   // calling idle process at first
	// Add code to initialize the SP with tcb[task_current].sp;
	save_tcbsp_coresp(tcb[taskCurrent].sp);
	__asm("    mov sp,r0    ");
	// Restore the stack to run the first process
	__asm("    pop {r4-r11} ");
	__asm("    pop {r0-r3}  ");
	__asm("    POP {r12}    ");
	__asm("    pop {lr}     ");
	__asm("    pop {pc}     ");

}

// REQUIRED: modify this function to yield execution back to scheduler
void yield() {
	__asm("    add sp, sp, #8");
	__asm ("    push {LR}");
	__asm ("    push {LR}");
	__asm ("    push {R12}");
	__asm ("    push {R0-R3}");
	__asm ("    push {R4-R11}");
	tcb[taskCurrent].sp = get_sp_value_from_ro();
	stop_timer();
	tcb[taskCurrent].process_time = (0xFFFFFFFF - timer_value);
	taskCurrent = rtosScheduler();
	save_tcbsp_coresp((uint32_t) tcb[taskCurrent].sp);
	__asm("    pop {r4-r11} " );
	__asm("    pop {r0-r3} " );
	__asm("    pop {r12}    " );
	__asm("    pop {lr}    " );
	__asm("    pop {pc}    " );

}

// REQUIRED: modify this function to support 1ms system timer
// execution yielded back to scheduler until time elapses
void sleep(uint32_t tick) {
	// push registers, set state to delayed, store timeout, call scheduler, pop registers,
	// return to new function (separate unrun or ready processing)

	tcb[taskCurrent].ticks = tick;
	__asm("    add sp, sp, #8");
	//r3,lr
	__asm ("    push {LR}");
	__asm ("    push {LR}");
	__asm ("    push {R12}");
	__asm ("    push {R0-R3}");
	__asm ("    push {R4-R11}");
	tcb[taskCurrent].sp = get_sp_value_from_ro();
	stop_timer();
	tcb[taskCurrent].process_time = (0xFFFFFFFF - timer_value);
	tcb[taskCurrent].state = STATE_DELAYED;
	taskCurrent = rtosScheduler();
	save_tcbsp_coresp((uint32_t) tcb[taskCurrent].sp);
	__asm("    pop {r4-r11} " );
	__asm("    pop {r0-r3} " );
	__asm("    pop {r12}    " );
	__asm("    pop {lr}    " );
	__asm("    pop {pc}    " );

}

// REQUIRED: modify this function to wait a semaphore with priority inheritance
// return if avail (separate unrun or ready processing), else yield to scheduler
void wait(struct semaphore *pSemaphore) {

	if (pSemaphore->count == 0) {

		tcb[taskCurrent].state = STATE_BLOCKED;
		tcb[taskCurrent].semaphore = (pSemaphore);
		pSemaphore->processQueue[pSemaphore->queueSize] = taskCurrent;
		pSemaphore->queueSize++;

	} else {
		pSemaphore->count--;//related to priority inheritance
	}
	yield();
}

// REQUIRED: modify this function to signal a semaphore is available
void post(struct semaphore *pSemaphore) {
	int p_cnt;
	if ((pSemaphore->count == 0)
			&& (tcb[pSemaphore->processQueue[0]].state == STATE_BLOCKED)) {
		(tcb[pSemaphore->processQueue[0]].state = STATE_READY);
		for (p_cnt = 1; p_cnt < pSemaphore->queueSize + 1; p_cnt++) {
			pSemaphore->processQueue[p_cnt - 1] =
					pSemaphore->processQueue[p_cnt];
		}
		pSemaphore->processQueue[p_cnt] = 0;
		pSemaphore->queueSize--;
	}

	else {
		pSemaphore->count++;
	}

}

// REQUIRED: modify this function to add support for the system timer
void systickIsr() {
	int var;
	for (var = 0; var < MAX_TASKS; ++var) {
		if (tcb[var].state == STATE_DELAYED) {
			tcb[var].ticks--;

			if (tcb[var].ticks == 0) {
				tcb[var].state = STATE_READY;
			}
		}
	}
}

// REQUIRED: modify this function to add support for the service call
void svcCallIsr() {
}

void SysTick_setup() {
	NVIC_ST_CTRL_R = 0;         // disable SysTick during setup
	NVIC_ST_CURRENT_R = 0;      // Writing any value to current reg clears it.
	NVIC_ST_RELOAD_R = 0x000093CF; //  to generate periodic delay of 1ms needs 39999 beacuse it counts 0.

}

//-----------------------------------------------------------------------------
// Subroutines
//-----------------------------------------------------------------------------

void initHw()
{
	// Configure HW to work with 16 MHz XTAL, PLL enabled, system clock of 40 MHz
    SYSCTL_RCC_R = SYSCTL_RCC_XTAL_16MHZ | SYSCTL_RCC_OSCSRC_MAIN | SYSCTL_RCC_USESYSDIV | (4 << SYSCTL_RCC_SYSDIV_S);

    // Set GPIO ports to use APB (not needed since default configuration -- for clarity)
    SYSCTL_GPIOHBCTL_R = 0;

    // Enable GPIO port F peripherals
    SYSCTL_RCGC2_R =SYSCTL_RCGC2_GPIOA|SYSCTL_RCGC2_GPIOB|SYSCTL_RCGC2_GPIOC|SYSCTL_RCGC2_GPIOD|SYSCTL_RCGC2_GPIOF;

    // Configure LED and pushbutton pins
    GPIO_PORTB_DIR_R = 0xC0;  // bits 6 and 7 are outputs, other pins are inputs
    GPIO_PORTB_DR2R_R = 0xC0; // set drive strength to 2mA (not needed since default configuration -- for clarity)
    GPIO_PORTB_DEN_R = 0xC0;  // enable LEDs
    GPIO_PORTB_PUR_R = 0x00;  // enable internal pull-up for push button

    GPIO_PORTC_DIR_R = 0x00;  // All bits are inputs including bit 4,5,6 and 7
    GPIO_PORTC_DR2R_R = 0xF0; // set drive strength to 2mA (bits 4,5,6 and 7)
    GPIO_PORTC_DEN_R = 0xF0;  // enable bits 4,5,6 and 7
    GPIO_PORTC_PUR_R = 0xF0;  // enable internal pull-up for push buttons

    GPIO_PORTD_DIR_R = 0x0C;  // bits 2 and 3 are outputs, other pins are inputs
    GPIO_PORTD_DR2R_R = 0x0C; // set drive strength to 2mA (not needed since default configuration -- for clarity)
    GPIO_PORTD_DEN_R = 0x0C;  // enable LEDs and pushbuttons
    GPIO_PORTD_PUR_R = 0x00;  // enable internal pull-up for push button

    GPIO_PORTF_DIR_R = 0x06;  // bit 1 and 2 is output, other pins are inputs
    GPIO_PORTF_DR2R_R = 0x06; // set drive strength to 2mA (not needed since default configuration -- for clarity)
    GPIO_PORTF_DEN_R = 0x06;  // enable LEDs
    GPIO_PORTF_PUR_R = 0x16;  // enable internal pull-up for push button


    // Configure UART0 pins
    	SYSCTL_RCGCUART_R |= SYSCTL_RCGCUART_R0;         // turn-on UART0, leave other uarts in same status
        GPIO_PORTA_DEN_R |= 3;                           // default, added for clarity
    	GPIO_PORTA_AFSEL_R |= 3;                         // default, added for clarity
        GPIO_PORTA_PCTL_R = GPIO_PCTL_PA1_U0TX | GPIO_PCTL_PA0_U0RX;

       	// Configure UART0 to 115200 baud, 8N1 format (must be 3 clocks from clock enable and config writes)
        UART0_CTL_R = 0;                                 // turn-off UART0 to allow safe programming
    	UART0_CC_R = UART_CC_CS_SYSCLK;                  // use system clock (40 MHz)
        UART0_IBRD_R = 21;                               // r = 40 MHz / (Nx115.2kHz), set floor(r)=21, where N=16
        UART0_FBRD_R = 45;                               // round(fract(r)*64)=45
        UART0_LCRH_R = UART_LCRH_WLEN_8 | UART_LCRH_FEN; // configure for 8N1 w/ 16-level FIFO
        UART0_CTL_R = UART_CTL_TXE | UART_CTL_RXE | UART_CTL_UARTEN; // enable TX, RX, and module

}

void init_timer1() {
	SYSCTL_RCGCTIMER_R |= SYSCTL_RCGCTIMER_R1;       // turn-on timer
	TIMER1_CTL_R &= ~TIMER_CTL_TAEN;      // turn-off timer before reconfiguring
	TIMER1_CFG_R = TIMER_CFG_32_BIT_TIMER;          // configure as 32-bit timer
	TIMER1_TAMR_R = TIMER_TAMR_TAMR_1_SHOT; // configure for oneshot mode (count down)
	TIMER1_TAILR_R = 0xFFFFFFFF;         // set load value to ffff ffff max time
	TIMER1_IMR_R = ~TIMER_IMR_TATOIM;                 // turn-off interrupts
	TIMER1_CTL_R |= TIMER_CTL_TAEN;                  // turn-on timer
}

// Approximate busy waiting (in units of microseconds), given a 40 MHz system clock
void waitMicrosecond(uint32_t us) {
	// Approx clocks per us
	__asm("WMS_LOOP0:   MOV  R1, #6");
	// 1
	__asm("WMS_LOOP1:   SUB  R1, #1");
	// 6
	__asm("             CBZ  R1, WMS_DONE1");
	// 5+1*3
	__asm("             NOP");
	// 5
	__asm("             B    WMS_LOOP1");
	// 5*3
	__asm("WMS_DONE1:   SUB  R0, #1");
	// 1
	__asm("             CBZ  R0, WMS_DONE0");
	// 1
	__asm("             B    WMS_LOOP0");
	// 1*3
	__asm("WMS_DONE0:");
	// ---
	// 40 clocks/us + error
}

void putcUart0(char c) {
	while (UART0_FR_R & UART_FR_TXFF)
		;
	UART0_DR_R = c;
}

// Blocking function that writes a string when the UART buffer is not full
void putsUart0(char* str) {
	int i;
	for (i = 0; i < strlen(str); i++)
		putcUart0(str[i]);
}

// Blocking function that returns with serial data once the buffer is not empty
char getcUart0() {

	while (UART0_FR_R & UART_FR_RXFE) {
		yield();
	}

	return UART0_DR_R & 0xFF;
}

void getstring() {
	int size;
	char c;
	size = 0;

	while (size < 80) {
		c = getcUart0();

		if (c == 8) {
			if (size > 0) {
				size = size - 1;
			}
		} else {
			if (c == 13) {
				str_g[size] = '\0';
				break;
			} else {
				str_g[size] = c;
				size = size + 1;
				if (size == 80) {
					str_g[size] = '\0';
					break;
				}
			}
		}
	}
	yield();
}

bool iscommand(char* word, int arg) {
	if ((strcmp(&str_g[field_position[0]], word) == 0)
			&& ((number_field - 1) == arg)) {
		return true;
	} else {
		return false;
	}
}

uint16_t getvalue(int arg) {
	if (field_type[arg] == 'n') {
		return atoi(&str_g[field_position[arg]]); // convert string to intiger value.
	} else {
		return 0;
	}

}

void start_timer() {
	timer_value = 0;
	TIMER1_CTL_R &= ~TIMER_CTL_TAEN;      // turn-off timer before reconfiguring
	TIMER1_TAILR_R = 0xFFFFFFFF;
	TIMER1_CTL_R |= TIMER_CTL_TAEN;
}

void stop_timer() {
	timer_value = TIMER1_TAV_R;
	TIMER1_CTL_R &= ~TIMER_CTL_TAEN;
}

// REQUIRED: add code to return a value from 0-15 indicating which of 4 PBs are pressed
uint8_t readPbs() {

	read_buttons = (8 * (!SWT4)) + (4 * (!SWT3)) + (2 * (!SWT2))
			+ (1 * (!SWT1));

//	     sprintf(str, "%d", read_buttons);
//	 	 putsUart0(" \r\n read_buttons >> ");
//	 	 putsUart0(str);
	return read_buttons;
}

// ------------------------------------------------------------------------------
//  Task functions
// ------------------------------------------------------------------------------

// one task must be ready at all times or the scheduler will fail
// the idle task is implemented for this purpose
void idle() {
	while (true) {
		ORANGE_LED = 1;
		waitMicrosecond(1000);
		ORANGE_LED = 0;
		yield();
	}
}

void idle1() {
	while (true) {
//		putsUart0("idle");
		ORANGE_LED = 1;
		waitMicrosecond(1000);
		ORANGE_LED = 0;
		yield();
	}
}

void flash4Hz() {
	while (true) {
		GREEN_LED ^= 1;
		sleep(125);
	}
}

void flash4Hz1() {
	//putsUart0("\r\n Running FLASH4Hz");
	while (true) {
		//putsUart0("\r\n Running while flash");

//			putsUart0("\nflash\n");
		GREEN_LED ^= 1;
		sleep(125);
	}

}

void oneshot() {

	while (true) {
		wait(flashReq);
		YELLOW_LED = 1;
		sleep(1000);
		YELLOW_LED = 0;
	}
}

void partOfLengthyFn() {
	// represent some lengthy operation
	waitMicrosecond(1000);
	// give another process a chance
	yield();
}

void lengthyFn() {

	uint16_t i;
	while (true) {
		for (i = 0; i < 4000; i++) {
			partOfLengthyFn();
		}
		RED_LED ^= 1;
		BLUE_LED = 0;
		waitMicrosecond(5000);
		BLUE_LED = 1;


	}
}

void lengthyFn1() {
//	putsUart0("\r\n Running Lengthy");

	uint16_t i;
	while (true) {
		wait(flashReq);
		for (i = 0; i < 4000; i++) {
			partOfLengthyFn();
		}
		putsUart0("\nLENGTHY_FUNCTION\n\n\n");
		RED_LED ^= 1;
	}
}

void readKeys1() {
	uint8_t buttons;
	while (true) {
		wait(keyReleased);
		buttons = 0;
		while (buttons == 0) {
			buttons = readPbs();
			yield();
		}
		post(keyPressed);
		if ((buttons & 1) != 0) {
			YELLOW_LED ^= 1;
			RED_LED = 1;
		}
		if ((buttons & 2) != 0) {
			post(flashReq);
			RED_LED = 0;
		}

		yield();
	}
}

int16_t readAdc0Ss3() {
	ADC0_PSSI_R |= ADC_PSSI_SS2;                     // set start bit
	while (ADC1_SSFIFO2_R & ADC_SSFSTAT2_EMPTY)
		;           // wait until SS3 is not busy
	return ADC0_SSFIFO2_R;                    // get single result from the FIFO
}

void readKeys() {
//	putsUart0("\r\n Running readkeys");

	uint8_t buttons;
	while (true) {
//		putsUart0("\r\n Running while readkey");

		wait(keyReleased);
		buttons = 0;
		while (buttons == 0) {
			buttons = readPbs();
			yield();
		}
		post(keyPressed);
		if ((buttons & 1) != 0) {
			YELLOW_LED ^= 1;
			RED_LED = 1;
		}
		if ((buttons & 2) != 0) {
			post(flashReq);
			RED_LED = 0;
			BLUE_LED = 1;
			sleep(100);
			BLUE_LED = 0;
		}
		if ((buttons & 4) != 0) {
			createThread(flash4Hz, "Flash_4hz", 0);
		}
		if ((buttons & 8) != 0) {
			destroyProcess(flash4Hz);
		}

		yield();
	}
}

void debounce() {

	uint8_t count;
	while (true) {
		//	putsUart0("\r\n Running while debounce");

		wait(keyPressed);
		count = 10;
		while (count != 0) {
			sleep(10);
			if (readPbs() == 0)
				count--;
			else
				count = 10;
		}
		post(keyReleased);
	}
}

void uncooperative() {
	while (true) {
//	putsUart0("\r\n Running while uncoop");
		while (readPbs() == 8) {
		}
		yield();
	}
}

void important()
{
	while(true)
	{
	wait(resource);
	BLUE_LED = 1;
	sleep(1000);
	BLUE_LED = 0;
	post(resource);
	}
}

void shell() {
	while (true) {

		for (i = 0; i < 81; i++) {
			str_g[i] = 0;
		}

		putsUart0("\n\rShell>> ");
		getstring();

		//*******Step-4******//  Counting

		number_field = 0;

		for (i = 0; i < 5; i++) {
			field_type[i] = 0;
		}

		for (i = 0; i < 5; i++) {
			field_position[i] = 0;
		}

		for (i = 0; i < 20; i++) {

			c2 = str_g[i];
			c3 = str_g[i - 1];
			if (i == 0 && isalpha(str_g[i])) {
				field_type[number_field] = 'a';
				field_position[number_field] = i;
				number_field = number_field + 1;
			}

			if ((!(isalpha(str_g[i - 1]))) && isalpha(str_g[i])
					&& (!(i == 0))) {
				field_position[number_field] = i;
				field_type[number_field] = 'a';
				number_field = number_field + 1;
			}

			if ((isalpha(str_g[i])) &&(c3 == 32 || c3 == 44)) {
				field_position[number_field] = i;
				field_type[number_field] = 'a';
				number_field++;
			}

			if ((isdigit(str_g[i])) &&(!(isdigit(str_g[i - 1])))) {
				field_position[number_field] = i;
				field_type[number_field] = 'n';
				number_field++;
			}

			if (c2 == 32 || c2 == 44) {
				str_g[i] = '\0';
			}

		}
		if (iscommand("ps", 0) || iscommand("PS", 0)) {
			putsUart0("\x1b[47m");
			tmer_1 = 0;
			for (j = 0; j < 10; j++) {
				tmer_1 = tmer_1 + tcb[j].process_time;
			}
			putsUart0("\x1b[31m");
			putsUart0(
					"\r\n  No.   PID        CPU Usage       Process Name          STATUS   ");
			for (i = 0; i < MAX_TASKS; i++) {
				putsUart0("\x1b[34m \n    ");
				sprintf(s2, "%d", i);
				putsUart0(s2);
				putsUart0("    ");
				sprintf(s2, "%d", tcb[i].pid);
				putsUart0(s2);
				putsUart0("         ");
				tmer = ((tcb[i].process_time * 100) / tmer_1);
				sprintf(s2, "%d", tmer);
				putsUart0(s2);
				putsUart0(".");
				tmer = (((tcb[i].process_time * 10000) / tmer_1)
						- (floor((tcb[i].process_time * 100) / tmer_1) * 100));
				sprintf(s2, "%d", tmer);
				putsUart0(s2);
				putsUart0("%           ");
				putsUart0(tcb[i].name);
				putsUart0("           ");
				if (tcb[i].state == 0) {
					putsUart0("STATE_INVALID");
				}
				if (tcb[i].state == 1) {
					putsUart0("STATE_READY");
				}
				if (tcb[i].state == 2) {
					putsUart0("STATE_BLOCKED");
				}
				if (tcb[i].state == 3) {
					putsUart0("STATE_DELAYED");
				}
			}
			putsUart0("\x1b[0m\n");
		}

		else if (iscommand("ipcs", 0) || iscommand("IPCS", 0)) {
			putsUart0(
					"\x1b[47m \x1b[31m \r\n\t\tCount\tQueue Size\t Waiting For TCB  ");
			putsUart0("\r\n FlashReq\x1b[34m\t");
			sprintf(temp_buffer, "%d\t\t %d\t\t %d ", semaphores[5].count,
					semaphores[5].queueSize, semaphores[5].processQueue[0]);
			putsUart0(temp_buffer);
			putsUart0("\x1b[31m\r\n KeyPressed \x1b[34m"); //Red color
			sprintf(temp_buffer, "\t%d\t\t %d\t\t %d ", semaphores[1].count,
					semaphores[1].queueSize, semaphores[1].processQueue[0]);
			putsUart0(temp_buffer);
			putsUart0("\x1b[31m\r\n KeyReleased \x1b[34m"); //Red color
			sprintf(temp_buffer, "\t%d\t\t %d\t\t %d ", semaphores[0].count,
					semaphores[0].queueSize, semaphores[0].processQueue[0]);
			putsUart0(temp_buffer);
			putsUart0("\n\x1b[0m");

			putsUart0(temp_buffer);
						putsUart0("\x1b[31m\r\n Resource \x1b[34m"); //Red color
						sprintf(temp_buffer, "\t%d\t\t %d\t\t %d ", semaphores[2].count,
								semaphores[2].queueSize, semaphores[2].processQueue[0]);
						putsUart0(temp_buffer);
						putsUart0("\n\x1b[0m");
		}

		else if (iscommand("kill", 1) || iscommand("KILL", 1)) {

			if (tcb[7].pid == getvalue(1)) {
				putsUart0(
						"\x1b[31m \r\n Killing Shell is not allowed \x1b[0m "); //Red color
			}
			if (tcb[8].pid == getvalue(1)) {
				putsUart0(
						"\x1b[31m \r\n Killing Magnets is not allowed \x1b[0m"); //Red color
			}

			for (i = 0; i < MAX_TASKS; i++) {
				if ((tcb[i].pid == getvalue(1)) && (tcb[7].pid != getvalue(1))
						&& (tcb[8].pid != getvalue(1))) {
					destroyProcess(tcb[i].pid);
					putsUart0("\x1b[32m \r\n Process Destroyed \n\x1b[0m"); //Green Color
				}
			}

		}

		else if (iscommand("reboot", 0) || iscommand("REBOOT", 0)) {
			putsUart0("\r\n Rebooting...");
			ResetISR();
		}

		else if (iscommand("pidof", 3) || iscommand("pidof", 1)
				|| iscommand("pidof", 2)) {

			for (i = 0; i < MAX_TASKS; i++) {
				if (strcmp(tcb[i].name, (str_g + field_position[1])) == 0) {
					putsUart0("\n pid of ");
					putsUart0(tcb[i].name);
					putsUart0(" :\x1b[32m");
					sprintf(s2, "%d", tcb[i].pid);
					putsUart0(s2);
					putsUart0("\x1b[0m");   //Reset Color
				}
			}
		} else if ((strcmp(str_g + field_position[0], "Idle&")) == 0) {
			createThread(idle, "Idle", 15);
			putsUart0("\x1b[32m\nIdle Successfully Created\n\x1b[0m");
		}

		else if ((strcmp(str_g + field_position[0], "Flash_4hz&")) == 0) {
			createThread(flash4Hz, "Flash_4hz", 0);
			putsUart0("\x1b[32m\nFlash_4hz Successfully Created\n\x1b[0m");
		}

		else if ((strcmp(str_g + field_position[0], "Lengthy_fn&")) == 0) {
			createThread(lengthyFn, "Lengthy_fn", 10);
			putsUart0("\x1b[32m\nLengthy_fn Successfully Created\n\x1b[0m");
		}

		else if ((strcmp(str_g + field_position[0], "One_shot&")) == 0) {
			createThread(oneshot, "One_shot", 4);
			putsUart0("\x1b[32m \nOne_shot Successfully Created\n\x1b[0m");
		}

		else if ((strcmp(str_g + field_position[0], "Read_keys&")) == 0) {
			createThread(readKeys, "Read_keys", 2);
			putsUart0("\x1b[32m \nRead_keys Successfully Created\n\x1b[0m");
		}

		else if ((strcmp(str_g + field_position[0], "Debounce&")) == 0) {
			createThread(debounce, "Debounce", 6);
			putsUart0("\x1b[32m \nDebounce Successfully Created\n \x1b[0m");
		}

		else if ((strcmp(str_g + field_position[0], "Uncoop&")) == 0) {
			createThread(uncooperative, "Uncoop", 7);
			putsUart0("\x1b[32m\nUncoop Successfully Created\n \x1b[0m");
		}

		else if (iscommand("help", 0) || iscommand("HELP", 0)) {
			putsUart0("\r\n Command List");
			putsUart0(
					"\r\n Type \x1b[32m 'ps' \x1b[0m to watch Process status");
			putsUart0(
					"\r\n Type \x1b[32m 'ipcs' \x1b[0m to watch wait & post status");
			putsUart0(
					"\r\n Type \x1b[32m 'Kill <PID>' \x1b[0m to Kill Process");
			putsUart0(
					"\r\n Type \x1b[32m '<process name>&' \x1b[0m to create Process");
			putsUart0(
					"\r\n Type \x1b[32m '<reboot' \x1b[0m to Restart Controller\n");
		}

	}
}


//-----------------------------------------------------------------------------
// Main
//-----------------------------------------------------------------------------

int main(void) {
	bool ok;

	// Initialize hardware
	initHw();
	init_timer1();
	rtosInit();

	// Power-up flash
	RED = 1;
	waitMicrosecond(250000);
	RED = 0;
	waitMicrosecond(250000);

//	putsUart0("\r\n Welcome Monank Doshi");
	putsUart0("\r\n ");


	// Initialize semaphores
	  keyPressed = createSemaphore(1);
		  keyReleased = createSemaphore(0);
		  flashReq = createSemaphore(5);
		  resource = createSemaphore(2);

	putsUart0("Normal Cooperative Mode");
			ok = createThread(idle, "Idle", 15);
			// Add other processes
			ok &= createThread(flash4Hz, "Flash_4hz", 0);
			ok &= createThread(lengthyFn, "Lengthy_fn", 10);
			ok &= createThread(oneshot, "One_shot", 4);
			

	// Start up RTOS
	if (ok)
		rtosStart(); // never returns
	else
		RED_LED = 1;

	return 0;
	// don't delete this unreachable code
	// if a function is only called once in your code, it will be
	// accessed with two goto instructions instead of call-return,
	// so any stack-based code will not function correctly
	yield();
	sleep(0);
	wait(0);
	post(0);
}

